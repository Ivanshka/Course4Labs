https://www.digitalocean.com/community/tutorials/how-to-configure-nginx-as-a-web-server-and-reverse-proxy-for-apache-on-one-ubuntu-18-04-server-ru

Инструкция рассчитана на выполнение НА ЧИСТОЙ ВИРТУАЛКЕ, т.е. БЕЗ IREDMAIL (без 1-й лабы).
При прямых руках ее можно использовать для выполнения этой лабы поверх 1-й, но лично мне лень так запариваться.

Смотрим задание:
*начало цитаты*
2.	для одного виртуального хоста Nginx, привязанного к доменному имени mail.<surname>.by, использовать PHP-FPM с Nginx без Apache*;
3.	для второго виртуального хоста Nginx, привязанного к доменному имени site.<surname>.by, настроить проксирование запросов к Apache, на котором развернуть Wordpress с базой данных, созданной ранее;
*конец цитаты*

Т.е. что он нас требуется?
Основной сервер - nginx. Но есть сайты, которые из-за конфигурационного файла .htaccess должны работать ТОЛЬКО на apache, т.к. nginx .htaccess не поддерживает. Таким образом apache перебрасываем на другой порт (например, 8080), а все http(s)-запросы принимает nginx, и если надо, то перебрасывает их на apache через fastCGI. Т.е. вот как это работает:

								                                                             да, есть -> передаем на apache через fastCGI
								                                                           /
клиент -> nginx -> смотрим в конфигах, есть ли dns-адрес в списке тех, что передаем apache
								                                                           \ нет, нету -> обрабатываем сами по общим или частным правилам (если такое есть для dns-адреса запроса)

Все это значит, что на шаге 5 инструкции выше мы создаем 1 виртуальный хост Apache (site.surname.by), на который поставим WordPress (я забил и просто статическую страничку всунул).
На шаге 7 инструкции мы делаем 2 вещи:
	1) Сначала создаем виртуальный хост на nginx для сайта mail.surname.by. По сути этот сайт будет полностью обрабатываться сервером nginx.
	2) Затем мы создаем еще один виртуальный хост на nginx. В его конфиге мы прописываем в имени dns-адреса всех сайтов, которые должны работать на apache. Таким образом когда запрос прилетает  Затемкоторый и пробросим на Apache. По сути этот хост будет являться nginx'овой "ссылкой" на хост Apache, nginx будет выступать для этого апачевского хоста в качестве прокси-сервера. nginx через fastCGI передаст обработку запросов Apache.

Если на шаге 7 инструкции в последней проверке info.php браузер будет предлагать СКАЧАТЬ файл вместо его открытия, то открываем эту страницу через Internet Explorer, а не через хромиумы или firefox (opera не проверял). Через IE все отлично открывается и можно проверить, как работает сервер.

P.S. Клон виртуалки с готовой лабой у Никиты на внешнем HDD.